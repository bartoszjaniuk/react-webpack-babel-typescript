# name: CI/CD Pipeline

# on:
#   push:
#     branches: [main]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     env:
#       S3_BUCKET: ${{ secrets.S3_BUCKET }}
#       CLOUDFRONT_DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION }}
#       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Install Dependencies
#         run: npm ci

#       - name: Build
#         run: npm run build

#       - name: Deploy to AWS
#         run: aws s3 sync ./dist s3://$S3_BUCKET --delete --region eu-west-1

#       - name: Clean Cache from CloudFront
#         run: aws cloudfront create-invalidation --region eu-west-1 --distribution-id $CLOUDFRONT_DISTRIBUTION --paths "/*"

name: CI/CD Pipeline

on:
  push:
    branches:
      - stage
      - uat

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    steps:
      - name: Checkout code
        run: run echo $NETLIFY_SITE_ID echo $NETLIFY_AUTH_TOKEN

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Netlify
        if: github.ref == 'refs/heads/stage'
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --auth $NETLIFY_AUTH_TOKEN --site $NETLIFY_SITE_ID

      - name: Deploy to AWS
        if: github.ref == 'refs/heads/uat'
        run: aws s3 sync ./dist s3://$S3_BUCKET --delete --region eu-west-1

      - name: Clean Cache from CloudFront
        if: github.ref == 'refs/heads/uat'
        run: aws cloudfront create-invalidation --region eu-west-1 --distribution-id $CLOUDFRONT_DISTRIBUTION --paths "/*"
